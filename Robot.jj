options 
{
	LOOKAHEAD=2; 
	IGNORE_CASE=true;
	STATIC = false;
	
}
   

PARSER_BEGIN(Robot)

package uniandes.lym.robot.control;

import uniandes.lym.robot.kernel.*;
import java.awt.Point;
import java.io.*;
import java.util.Vector;
import java.util.LinkedList;

@SuppressWarnings("serial")
public class Robot 
{


	private RobotWorldDec world;
	
	
	void setWorld(RobotWorld w) {
		world = (RobotWorldDec) w;	
	}

	String salida=new String();
}
PARSER_END(Robot)

SKIP:
{
	" "
	|	"\r"
	|	"\t"
//	| "\n"
}

TOKEN: /* Nombres de Comandos */
{

			<DEFVAR:  "defvar">
		| 	<ASIGNAR: "=">
		| 	<MOVE: "move">
		| 	<TURN: "turn">
		| 	<FACE: "face">
		| 	<PUT: "put">
		|   <PICK: "pick">
		| 	<MOVE_DIR: "move-dir">
		| 	<RUN_DIRS: "run-dirs">
		| 	<MOVE_FACE: "move-face">
		| 	<SALTAR: "skip">
		

}
TOKEN: /* Parentesis*/
{

			<parA: "(">
		|	< parC: ")"> 

}

TOKEN: /*Cardinales*/
{
			<NORTE: ":north">
		|	<SUR: ":south">
		| 	<ESTE: ":east">
		|   <OESTE: ":west">  
}

TOKEN:/*Direcciones*/
{
  			<LEFT: ":left">
  		| 	<RIGHT: ":right">
  		| 	<AROUND: ":around">
  		| 	<FRONT: ":front">
  		| 	<BACK: ":back">

}

TOKEN :
{
			<BALLOONS:  "Balloons" >
		|	<CHIPS: "Chips"  >	

}

TOKEN :
{
			<FACING_P:  "facing-p">
		|	<CAN_PUT_P: "can-put-p" >
		| 	<CAN_PICK_P: "can-pick-p">
		| 	<CAN_MOVE_P: "can-move-p">
		| 	<NOT: "not"> 	

}


TOKEN :
{
		<NUMERO: (<DIGIT>)+ >
		|  	<#DIGIT: ["0"-"9"] >
		| 	< LETTER: ["a"-"z","A"-"Z"] >
		| 	< VARIABLE:(((<DIGIT>)*<LETTER>))((<DIGIT>|<LETTER>)*) >
}

/*Definicion de comandos*/
void defvariable():
{}
{
  <parA>
  <DEFVAR>
  <VARIABLE>
  <NUMERO>
  <parC>
}

void asignar():
{}
{
  <parA>
  <ASIGNAR>
  <VARIABLE>
  <NUMERO>
  <parC>
}

void mover():
{}
{
  <parA>
  <MOVE>
  (
  		<NUMERO>
	| 	<VARIABLE> /*OJO no revisa si ese nombre existe anteriormente*/
  )
  <parC>
}

void turn():
{}
{
  <parA>
  <TURN>
  (		<LEFT>
	| 	<RIGHT>
	| 	<AROUND>
  )
  <parC>
}

void face():
{}
{
  <parA>
  <FACE>
  (		<NORTE>
	| 	<SUR>
	| 	<ESTE>
	| 	<OESTE>
  )
  <parC>
}

void put():
{}
{
  <parA>
  <PUT>
  (		<BALLOONS>
	|	<CHIPS> 
  )
  (
  		<NUMERO>
	| 	<VARIABLE> /*OJO no revisa si ese nombre existe anteriormente*/
  )
  <parC>
}

void pick():
{}
{
  <parA>
  <PICK>
  (		<BALLOONS>
	|	<CHIPS> 
  )
  (
  		<NUMERO>
	| 	<VARIABLE> /*OJO no revisa si ese nombre existe anteriormente*/
  )
  <parC>
}

void move_dir():
{}
{
  <parA>
  <MOVE_DIR>
  (
  		<NUMERO>
	| 	<VARIABLE> /*OJO no revisa si ese nombre existe anteriormente*/
  )
  
  (		<FRONT>
	|	<BACK>
	| 	<RIGHT>
	| 	<LEFT> 
  )
  <parC>
}

void run_dirs():
{}
{
  <parA>
  <RUN_DIRS>

  <parA>
  (		<FRONT>
	|	<BACK>
	| 	<RIGHT>
	| 	<LEFT> 
  )+
  <parC>
  <parC>
}

void move_face():
{}
{
  <parA>
  <MOVE_FACE>
  (
    	<NUMERO>
  | 	<VARIABLE> /*OJO: Ver si se debe verificar que la variable ya existe. REVISAR*/
  )
  (		<NORTE>
	|	<SUR>
	| 	<ESTE>
	| 	<OESTE> 
  )
  <parC>
}

void skip():
{}
{
  <parA>
  <SALTAR>
  <parC>
}

void commands():
{}
{
	   (defvariable(){salida = "Command: DefVariable";})
	 | (asignar(){salida = "Command: Asignar";})
	 | (mover(){salida = "Command: Mover";})
	 | (turn(){salida = "Command: Turn";})
	 | (face(){salida = "Command: Face";})
	 | (put(){salida = "Command: Put";})
	 | (pick(){salida = "Command: Pick";})
	 | (move_dir(){salida = "Command: Move-dir";})
	 | (run_dirs(){salida = "Command: Run-dir";})
	 | (move_face(){salida = "Command: Move-Face";})
	 | (skip(){salida = "Command: Skip";})
}

/*Definicion de condicionales*/

void facing_p():
{}
{
  <parA>
  <FACING_P>
  (		<NORTE>
	|	<SUR>
	| 	<ESTE>
	| 	<OESTE> 
  )
  <parC>
}

void can_put_p():
{}
{
  <parA>
  <CAN_PUT_P>
  (		<BALLOONS>
	|	<CHIPS> 
  )
  (
    	<NUMERO>
  | 	<VARIABLE> /*OJO: Ver si se debe verificar que la variable ya existe. REVISAR*/
  )

  <parC>
}

void can_pick_p():
{}
{
  <parA>
  <CAN_PICK_P>
  (		<BALLOONS>
	|	<CHIPS> 
  )
  (
    	<NUMERO>
  | 	<VARIABLE> /*OJO: Ver si se debe verificar que la variable ya existe. REVISAR*/
  )

  <parC>
}

void can_move_p():
{}
{
  <parA>
  <CAN_MOVE_P>
  (		<NORTE>
	|	<SUR>
	| 	<ESTE>
	| 	<OESTE> 
  )

  <parC>
}

void not_cond():
{}
{
  <parA>
  <NOT>
  (		facing_p()
	|	can_put_p()
	| 	can_pick_p()
	| 	can_move_p()
	| 	not_cond()
	| 	<VARIABLE> /* OJO, AQUI NO SE REVISA SI ES YA UNA VAR DEFINIDA. REVISAR*/
  )

  <parC>
}


void condiciones():
{}
{
  		(facing_p(){salida = "Command:face p";})
	 | (can_put_p(){salida = "Command: can put";})
	 | (can_pick_p(){salida = "Command: can pick";})
	 | (can_move_p(){salida = "Command: can move";})
	 | (not_cond(){salida = "Command: not cond";})
	 | (< VARIABLE >{salida = "Command: variable";})/* OJO, AQUI NO SE REVISA SI ES YA UNA VAR DEFINIDA. REVISAR*/

}

boolean command(StringBuffer sistema) :
{	
	
	int x;
	//salida=new String();
	
}
	
{
	(
	  (commands())
	| (condiciones())
	   

	) "\n" 

	{
	  //  try {
    	//		 Thread.sleep(1);
    	  //   } catch (InterruptedException e) {
    		//	        System.err.format("IOException: %s%n", e);
    		//	    }
    			 
		sistema.append(salida);
		return true;
	}

 |  "\n" { return true; }

	| <EOF> {return false;} 
}


/*
Gramatica para el Robot:
Autor: Alejandro Arango
Modificado por: Silvia Takahashi
Modificado por: Juan Pablo Morales.
Agregadas producciones para manejar globos
Modificado por Silvia Takahashi
Eliminadas producciones para manejar globos
Agregado el esqueleto para la traduccion
Modificado por Silvia Takahashi 
Re: Agregar Reglas para el manejo de globos
Modificado por Saulo Daza y Sonia Vivas
Modificado por Silvia Takahashi
Eliminadas reglas de traducci�n DE  MARCROS
Cambio del lenguaje de comandos
Modificado por Silvia Takahashi: algunas Reglas para traduccion
Modificado por Silvia Takahashi: Cambio en el lenguaje
Abril: 2008 - Simplificado apra solo interpretaci�n
 **/

/*
options 
{
	LOOKAHEAD=1; 
	IGNORE_CASE=true;
	STATIC = false;
	
}
   

PARSER_BEGIN(Robot)

package uniandes.lym.robot.control;

import uniandes.lym.robot.kernel.*;
import java.awt.Point;
import java.io.*;
import java.util.Vector;
import java.util.LinkedList;

@SuppressWarnings("serial")
public class Robot 
{


	private RobotWorldDec world;
	
	
	void setWorld(RobotWorld w) {
		world = (RobotWorldDec) w;	
	}

	String salida=new String();
}
PARSER_END(Robot)

SKIP:
{
	" "
	|	"\r"
	|	"\t"
//	| "\n"
}

TOKEN: // Nombres de Comandos 
{

			<T_MOVER:  "Move">
		| 	<T_TURNRIGHT: "TURNRIGHT">
		| 	<T_PONER: "Put">
		| 	<T_RECOGER: "Pick">
		|  < T_POP: "Pop" >
		

}

TOKEN :
{
		<T_BALLOONS:  "BALLOONS" >
		|	<T_CHIPS:     "CHIPS"  >	

}


TOKEN :
{
		<NUMERO: (<DIGIT>)+ >
		|  	<#DIGIT: ["0"-"9"] >
}


	boolean command(StringBuffer sistema) :
	{	
		
		int x;
		salida=new String();
		
	}
	
	{
		(
		   <T_TURNRIGHT> "(" ")" {world.turnRight();salida = "Command: Turnright";}
		| 	<T_MOVER>  "(" x=numero() ")" {world.moveForward(x);salida = "Command: Moveforward ";}  
		|  <T_PONER> "("  objetoPoner() ")"					  			
		|  <T_RECOGER> "("  objetoRecoger()  ")"	
	    |  < T_POP > "(" x=numero() ")" {world.popBalloons(x); salida = "Comando:  Pop";}
		) "\n" 

		{
		  //  try {
	    	//		 Thread.sleep(1);
	    	  //   } catch (InterruptedException e) {
	    		//	        System.err.format("IOException: %s%n", e);
	    		//	    }
	    			 
			sistema.append(salida);
			return true;
		}

     |  "\n" { return true; }

		| <EOF> {return false;} 
	}

	void objetoPoner() :
	{
		int f=1;	
	}
	{
		( <T_CHIPS>    "," f=numero() {world.putChips(f); salida = "Command:  Put Chips"; })
		|  	  ( <T_BALLOONS>   "," f=numero() {world.putBalloons(f); salida = "Command:  Put Balloons";})	 

	}

	void objetoRecoger() :
	{
		int f=1;	
	}
	{
		( <T_CHIPS>   "," f=numero() {world.pickChips(f);salida = "Command:  Pick chips";})
		|  	  ( <T_BALLOONS>   "," f=numero() {world.grabBalloons(f);salida="Command:  Pick balloons";})	 

	}

	
	

	/**
	 *  reconoce un numero entero sin signo
	 * @return el valor entero correspondiente al valor reconocido
	 */

/*

	int numero() throws Error:
	{	
		int total=1;
	}
	{
		<NUMERO>
		{
			try 
			{
				total = Integer.parseInt(token.image);
			} 
			catch (NumberFormatException ee) 
			{
				// Dada la forma de NUMERO, sabemos que solo puede tener d�gitos
				// Por lo tanto, lo unico que podria pasar es que el numero sea muy grande
				throw new Error("Number out of bounds: "+token.image+"!!");
			}
			return total;
		}
	}
	
*/

	